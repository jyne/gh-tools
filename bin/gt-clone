#!/usr/bin/env python
import argparse
import logging
import os
import signal
import sys

from sh import git

from ghtools.WorkList import WorkList

logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.INFO)

def signal_handler(signal, frame):
    os._exit(0)

signal.signal(signal.SIGINT, signal_handler)

def clone_repository(repo, root_directory):
    system = repo['id'] + '-' + repo['name']
    if 'working_directory' in repo:
        target_dir = repo['working_directory']
    else:
        target_dir = os.path.join(root_directory, system)
    if os.path.isdir(target_dir):
        logger.info('Found existing working directory, skipping ' + system)
        repo['working_directory'] = target_dir
        return
    try:
        logger.info("Shallow cloning repository for project: " +
                    repo['name'] + "...")
        git.clone("--depth=1", repo['url'] + '.git', target_dir)
        repo['working_directory'] = target_dir
        repo.set_status_ok()
    except:
        logger.error('Error in downloading codebase: ' + repo['name'])
        logger.error(sys.exc_info())
        logger.error('On line: ' + format(sys.exc_info()[-1].tb_lineno))
        repo.set_status_failed()

def process_script_arguments(args):
    parser = argparse.ArgumentParser(description='Clone GitHub repositories')
    parser.add_argument('-i', '--infile', required=True,
                        type=argparse.FileType('r+'),
                        help='read list of repositories from this JSON file')
    parser.add_argument('-o', '--output', required=True,
                        help='destination directory for cloned repositories')
    parser.add_argument('-r', '--retry', action='store_true',
                        help='retry failed entries in JSON file')

    if len(args) < 2:
        parser.print_help()
        sys.exit(1)

    result = parser.parse_args()

    if not os.path.isdir(result.output):
        parser.print_help()
        sys.exit(1)

    return result

if __name__ == "__main__":
    args = process_script_arguments(sys.argv)
    try:
        if args.infile is not None:
            wl = WorkList(args.infile)
        else:
            wl = WorkList()
    except ValueError as e:
        logger.error('Error reading JSON worklist:\n' + e.message)
        sys.exit(1)

    for repo in wl:
        if args.retry:
            if not repo.is_status_ok():
                clone_repository(repo, os.path.abspath(args.output))
        else:
            if repo.is_status_ok():
                clone_repository(repo, os.path.abspath(args.output))
            else:
                logger.info('Skipping id ' + str(repo['id']))

    if args.infile is None:
        wl.write(sys.stdout)
